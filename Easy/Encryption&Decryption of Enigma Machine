# During World War II, the Germans were using an encryption code called Enigma â€“ 
# which was basically an encryption machine that encrypted messages for transmission. 
# The Enigma code went many years unbroken. 
# Here's How the basic machine works:
# 
# First Caesar shift is applied using an incrementing number:
# If String is AAA and starting number is 4 then output will be EFG.
# A + 4 = E
# A + 4 + 1 = F
# A + 4 + 1 + 1 = G
# 
# Now map EFG to first ROTOR such as:
# ABCDEFGHIJKLMNOPQRSTUVWXYZ
# BDFHJLCPRTXVZNYEIWGAKMUSQO
# So EFG becomes JLC. Then it is passed through 2 more rotors to get the final value.
# 
# If the second ROTOR is AJDKSIRUXBLHWTMCQGZNPYFVOE, we apply the substitution step again thus:
# ABCDEFGHIJKLMNOPQRSTUVWXYZ
# AJDKSIRUXBLHWTMCQGZNPYFVOE
# So JLC becomes BHD.
# 
# If the third ROTOR is EKMFLGDQVZNTOWYHXUSPAIBRCJ, then the final substitution is:
# ABCDEFGHIJKLMNOPQRSTUVWXYZ
# EKMFLGDQVZNTOWYHXUSPAIBRCJ
# So BHD becomes KQF.
# 
# Final output is sent via Radio Transmitter.

def swap_values():
    global message, encoded_message
    message = "".join(encoded_message)
    encoded_message = ""


def encode(rotor_list):
    swap_values()

    def pass_rotor(rotor):
        global message, encoded_message, alphabet
        for x in message:
            encoded_message += rotor[alphabet.index(x)]

    for j in range(len(rotor_list)):
        pass_rotor(rotor_list[j])
        swap_values()


def decode(rotor_list):
    def pass_rotor(rotor):
        global message, encoded_message, alphabet
        for x in message:
            encoded_message += alphabet[rotor.index(x)]
    for j in range(len(rotor_list)-1, -1, -1):
        pass_rotor(rotor_list[j])
        swap_values()


operation = input()
pseudo_random_number = int(input())
rotors = ["", "", ""]

for i in range(3):
    rotors[i] = input()
    
message = list(map(str, input().upper()))
encoded_message = ""
alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"

if operation.upper() == "ENCODE":
    for i in message:
        index = alphabet.index(i) + pseudo_random_number
        if index > 26:
            index -= 26
        encoded_message += alphabet[index]
        pseudo_random_number += 1
    encode(rotors)
    print(message)
    
elif operation.upper() == "DECODE":
    decode(rotors)
    for i in message:
        index = alphabet.index(i) - pseudo_random_number
        if index < 0:
            index += 26
        encoded_message += alphabet[index]
        pseudo_random_number += 1
    swap_values()
    print(message)
